                             容器安全性探讨
容器技术因为它强大的灵活性、可重用性、可移植性的优点，成为了当前时代的IT解决方案的主流，我们可以使用容器来对我们需要的环境进行快速地部署，并将其运行在云平台上。虽然云平台使用容器的技术日渐成熟，但随之而来的安全问题也是我们需要关注的。
首先就是容器镜像的正规性导致的，我们很难确定我们所下载的镜像是由官方发布的。大多数情况中，我们所使用的镜像经过了多个使用者的更新、修改，有可能引入一些我们没有意料到的漏洞。第二， 随意地修改已部署的软件，违反已部署软件的不变性原则，导致引入漏洞。
为此，作者通过分析这些部署在云上的容器来尝试解决这些可能出现的挑战。

    那些由第三方发行的镜像往往存在着很多漏洞
    在线升级容器已经是一件平常的事情了，但是这违反了已部署软件的不变性原则
    通过单独检测对公共的容器、镜像的方式对于根除漏洞是不够充分的，作者提倡系统提供更好的支持来记录镜像的来源，杜绝对容器的修改，使用户能够安全的使用他们的容器。 

对于如何判断一个容器是否存在漏洞，作者自定了一个表格来对那些需要容器使用者遵守的规则进行描述，继而对后续的分析部分进行漏洞类型的分类，他大致将其分为三个部分：

    密码相关的规则限制（2B-D）
    文件系统完整性
    远程连接的安全性（9A-G） 

    《《《《《漏洞表格图》》》》》》

对于以上提出的三种规则的类型，作者认为第三个规则是最重要的，因为SSH经常容易被用作一个攻击的进入点，当一个用户使用的是一个简单的密码，并且开启了sshd服务的话，攻击者很可能使用字典破解的方式直接对密码进行破解，直到将密码试出来并进行登陆。
为什么会出现上述的多种违反安全规定的情况呢，作者指出最常见的情况就是因为用户所使用的镜像通过不断的更新，无论是用户自己的操作还是通过更新为他人的修改版本，这个过程都很有可能引入无法预料到的漏洞。举个作者所研究例子来说，在作者作为研究样本的容器中，有一个包含50个容器的列表，该列表中的容器都违反了9A、9F和9G，他们的SSH服务是运行的、允许密码进行认证的、都有使用弱密码的账号，被归类为高风险名单。不仅仅是表格里的容器都违反了相同的规则，这些容器还有特别的共性-他们的源镜像的名称都有共有的部分（比如说”myappsrv“），就像他们来自于同一个创建者一样，但实际上他们的创建者都不相同，如何解释这件事的起因呢？最后作者发现，这些高风险容器之所以有如此多的共性，是因为这个镜像起源于网上的一个在线学习的课程，学生们对相同的源镜像进行拉取，并在上面创建了一个带有弱密码的账号，通过自己的修改再将其部署到容器上，而指导教师再次将该修改后的镜像进行修改，在没有发现该源镜像存在弱密码的情况下开启了SSH服务，并将其再次推送到镜像库中供之后在线学习的学生进行下载，该高风险的镜像就是以这种方式传播的。

    《《《《《漏洞传播图》》》》》》

作者称这种漏洞的引入行为为偏移（drift），指代容器违反了新的规则，即容器在使用的过程中由于各种修改的原因导致容器违反了原本遵守的规则。那为什么这些具有破坏性的偏移会轻易的被引入容器中呢，作者总结了以下3点原因：
    通过远程外壳访问进行更新：Docker容器的使用者能够登录到容器中执行本地的命令并同时改变容器的状态，容器提供了两种方式来进行外壳访问-本地的Docker守护命令（exec，attach）和通过用户安装的远程外壳访问服务器（SSH登录）。
    自动软件更新：由于许多软件在安装时就设定了自动安装更新的默认选项，这些带有自动更新选项的软件被装载到了镜像中，当使用者在创建这类容器镜像时往往会忽略这些已安装的软件设置，从而使软件自行进行更新。
    运行时的软件配置：为了便利性，大多数的服务器应用都提供网站供使用者对这些服务器应用进行配置的设定、修改，这使得这类软件在安装后还会接受到很大机会的更改。
     
那如何防止用户所使用的容器在使用的过程中不断的引入漏洞呢？
首先，系统和容器的用户社区都该意识到不应该对那些镜像进行任意的修改，应该共同遵守不可变基础设施（Immutable Infrastructure）。其二，系统应该提供更好的工作机制来支持对版本、修改的记录，和对自动化检测便宜。最后，使用者也应该在使用中坚持这种不可改变的原则。