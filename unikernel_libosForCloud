一.unikernel是能够将服务部署在云上的一种新的方式，他可以有效的提高效率、安全、减少操作开销，有效的减少了自身的体积大小。
本文所写的unikernel-Mirage的贡献主要为以下三点：
    1.提供给云上的服务一套应用
    2.使用Ocaml这种类型安全的语言且没有过大的性能损失
    3.提供库和扩展供在该系统上使用Ocaml编程使用

二.unikernel对所部署的应用的改进：
    1.配置与部署：对于一些需要在启动时进行配置的应用（如数据库、webServer），unikernel将这部分的应用当做库对待，在编程过程中可以动态对库（需配置的应用）进行调用，使其对其他应用的配置可于编译阶段完成。
    2.优化：在编译过程中，只使用unikernel需要的代码进行编译，而使用更少的代码进行编译，也就意味着引入更少的bug。
    3.安全：通过使用类型安全语言、减少编译时期包含的无用代码、对hypervisor的工具链拓展来保证该系统的安全。
	3.1由于包含更多代码意味着开启更多无关的服务，也意味着开放更多接口，这无异于使系统遭受更多不同方式的攻击。而unikernel只编译本身需要的代码，因此体积更小、更安全。
	3.2其他类型的操作系统之所以支持多语言是为了对已存在的代码的向后兼容性，但是对于这样一种简单的系统没必要引入更多的复杂性而只为了处理不同语言的编译，所以unikernel采用单一的类型安全语言来防止被攻击。
	3.3unikernel中设计了一种页表，该页表描述了每一页的可操作权限，该页表将每一页的权限设置为只写或者只执行，并使用一个hypercall来阻止其他人对该页表的修改，以此来防止代码注入的攻击。
	3.4由于unikernel在每次部署时大部分都要进行重新编译，我们就可以在其编译过程中引入将地址空间随机的操作，来避免执行的代码被恶意修改。

三.本文所实现的unikernel-Mirage的细节
    1.Mirage对于执行Ocaml代码执行了两处主要修改-内存管理、并发
	1.1内存管理主要是VMs之间信息交换中，Xen将分配给不同的VM一部分区域，并允许不同VM通过引用来获取对方的数据，而不是必须请求一份数据的拷贝。
	2.2Mirage还实现了Lwt线程库来实现并发
    2.Mirage的I\O部分是通过使用Ocaml编写的库来保证外部I\O的健壮性，防止I\O操作中的内存泄漏问题。该部分主要实现了网络数据交换的两种方式：
	2.1本机VMs之间的交换是通过共享内存的方式进行交换。
	2.2与以太网外部的VM的数据交换则较复杂，通过层层协议将数据交换
    3.传统OS kernel通过POSIX sockets、mmap等方式将文件写入内核的缓冲储存器中，以此来将文件系统层次建立于块设备上。相比于这种方式，Mirage的块设备通过将缓冲的抽象当做普通的网络I\O设备，提供与普通I\O页、文件系统等类似的块访问方式，以此来提高效率。

感想：
1.作者根据对应用的不同需求而区分开普通虚拟机与unikernel，unikernel由于只支持单一应用所以相比于普通虚拟机，能够将大多数用不到的代码、服务抛弃，仅利用自身需要的代码进行编译，在减少自身体积的同时将引入更少的代码bug和服务漏洞。
2.作者提供给我们好几种防止攻击的思路：
	2.1减少服务、代码防止更多漏洞被暴露。
	2.2采用随机地址空间：作者还考虑到由于在运行期间采用随机地址空间操作可能会引入更多复杂性，由于unikernel的代码量较少且每次运行都要编译，所以作者将随机地址空间的操作修改到编译期进行，可以减少系统的复杂性，并提供系统一种保证安全的方法。
	2.3使用类型安全语言。
3.该系统为了自身的安全做了很多对代码的改动、改进，但是要按照该系统仅能使用单一语言进行编程的规则来看，我们在运用该方式进行其他unikernel的构建中需要很多的改动，在使用不同语言支持的unikernel时就要对代码进行修改，工作量很大。


