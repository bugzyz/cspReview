---------------------sumary--------------------- 
本文中提到的sgx技术是基于安全而产生的，该技术能够提供一个TEE（trusted execution environment）也就是叫做enclave的容器中，一些需要得到保护的程序就能够将它不希望别人接触到的数据都放置于此，且sgx是通过硬件的方式将这些私密数据进行防护，所以能够有效的将恶意程序隔绝于该enclave之外。 
在该隔绝私密数据与外界的enclave中，其中的代码默认只相信cpu，且只有cpu能够对其中的数据进行操作。但是由于与绝大部分的cpu中的指令不同，sgx中由于需要对enclave中的数据进行防护需要对许多系统调用的实现进行修改、增加、禁用，这就导致了许多原有已经设计好的程序没办法在保持原样的情况下照常运行，要进行一定的修改才能在sgx中具有防护机制的cpu中运行。 
在该论文中叫做Graphene就是针对该特性而设计的一种libOS。他是作为一个libOS提供给需要运行在enclave中的程序一层抽象，保证程序能够在原有代码不变的情况下照常运行运行在已修改的操作系统上，且与其他为了避免因sgx的限制而修改代码的解决方案而产生的如Haven、SCONE等方案不同，Graphene的实现一方面能够有效的实现应用程序不需修改就能够通过Graphene libOS运行在enclave上，另一方面也澄清了通过libOS的方式不会对性能造成很大影响、不会将可信代码基的尺寸增加到外界所说的5X、且能够提供有效的安全防护。 
对于现在越来越多运行在云端的应用，相比于单独运行在自己的服务器上这种能够拥有一个独立干净的运行环境，运行在云端也意味着收到的攻击来源更加丰富。因此，我觉得sgx的产生是有存在价值的，它能够在一个复杂的云端环境对应用程序进行有效的保护，而越来越多的解决方案也是在减少应用程序重构工作量的同时提供越来越丰富、安全的防护手段。 
---------------------comment--------------------- 
文中的Graphene相比于其他的针对sgx的libOS，性能的提升、代码量的减少都是该libOS的重大突破，并且提供了对进入enclave的代码的有效防护机制。
我相信针对Intel的sgx的各项技术将会继续发展下去，虽然对于现在产生的一些针对sgx的解决方案都能够有效的为enclave中运行的程序提供防护、减少该运行程序需要重构的工作量，但是目前来说还是能够有相应的技术能够对enclave中的数据进行破解、造成私密数据的泄露，比如说通过side channel进行攻击对enclave中的密码进行读取可以有效的得到cpu进入enclave中读取私密数据的权限。而对于运行与enclave数据中的代码，我们也不能够百分之百就相信其中的代码不存在漏洞，即使他是运行在enclave中，能够防止host os、运行在host os上的其他程序对其中的数据进行访问，但是难以避免其中的数据不因为本身的设计缺陷存在漏洞。